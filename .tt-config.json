{
  "project": {
    "owner": "",
    "number": ""
  },
  "workon": {
    // the status to set in the project when the workon subcommand is used
    "status": "In Progress",
    "policies":{
        // Run a rebase when an existing branch is found no rebase is performed if this is an empty string
        "rebase": "origin/main",
        // if "rebase" and "allow-dirty" are both set to true, A stash is done before the rebase and a stash pop after.
        "allow-dirty": true
    }
  },
  "wrapup": {
    // the status to set in the project when the wrapup subcommand is used
    "status": "Delivery Initiated",
    "policies":{
        // "collapse:true" will rebase the branch onto itself - essentially collapsing the commits into one
        // "collapse:false" will leave the branch as is
        "collapse": true,
        // The prefix to use for the collapsed branch - igonered if "collapse:false", required if "collapse:true"
        "branch": "ready/",
        // The closing keyword to use when closing the issue in the project - ignored if a valid closing keyword is found in the commit message
        "close-keyword": "resolves",
        // The branch to rebase onto - no rebase is performed if this is not set, or value is an empty string
        "rebase": "origin/main"
    }
  },
  "deliver": {
    "policies": {
        // "model:branch" will just push the branch to the remote
        // "model:pr" will create a pull request for the branch
        "model": "branch",
        // "codeowner:true" will add read the CODEOWNERS file and require a review if commit contains files with ownership
        // Ignored if model "model:pr" is used
        "codeowner": true
    }
  }
}