[project]
name = "gh-tt"
version = "0.0.1"
description = "GitHub extension automating trunk-based development"
requires-python = ">=3.13"
authors = [
    {name = "Lars Kruse", email = "lars@lakruzz.com"}
]
license = "GPL-3.0-or-later"
readme = "README.md"
keywords = ["github", "trunk-based-development", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]

dependencies = [
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff>=0.12.0",
]

build = [
    "setuptools",
    "packaging"
]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "temp",
]

# Use extend-exclude to temporarily exclude files while working on linting one at a time
# Listed files will NOT be linted during 'ruff check .' 
# Comment out (or delete). files as you are ready to include them in the linting check
extend-exclude = [
    
    "gh_tt/classes/devbranch.py",
    "gh_tt/classes/gitter.py",
    "gh_tt/classes/label.py",
    "gh_tt/classes/responsibles.py",
    "gh_tt/tests/",  # Exclude all test files for now
]

# Generous line length for wide screens
line-length = 180

indent-width = 4
target-version = "py313"

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = [
    "B",
    "I",
    "ERA",
    "F",
    "E",
    "S",
    "RUF",
    "SIM",
    "UP",
    "N",
    "ASYNC",
    "FBT",
    "A",
    "C4",
    "C90",
    "DTZ",
    "T",
    "ISC",
    "PIE",
    "PT",
    "RET",
    "TID",
    "ARG",
    "PTH",
    "PERF",
    "FURB"
]

ignore = [
    # Allow use of `assert`
    "S101",
    # Allow use of `print()`
    "T201",
    # The vast majority of violations for this rule
    # are comments or f-strings. Since there's 100+
    # error coming up which have little effect on the
    # code, I'm ignoring the rule for now. @vemolista
    "E501",
    # pytest vs. standard library unittest usage is for a later discussion.
    # The ruleset is both selected and ignored to signal the need for alignment.
    "PT", 
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.pytest.ini_options]
markers = [
    "smoke: marks tests as smoke tests",
    "dev: these tests are for development purposes - not necessarily mocked or stable, used by development team in the devcontainer",
    "unittest: these tests are for unit testing",
    "integration: test calling external apis",
]
log_file = "logs/test.log"
log_cli = true
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(module)s - Line:%(lineno)d - %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "DEBUG"
log_format = "%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(module)s - Line:%(lineno)d - %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
# Include the main CLI script and the classes directory
source = [
    "gh_tt/"
]

# Exclude test files
omit = [
    "*/tests/*",
    "gh_tt/modules/*",
    "setup.py",
    "gh_*.py"
]

[tool.coverage.report]
# Fail the build if the coverage is less than threshold
fail_under = 54

# Skip empty files
skip_empty = true