// This file contains the recipes for retrieveing properties in classes that inherit from the LazyLoad class.
// Elements are listed under the class name that they belong to.
// Elements are named with the property name that they represent.
// Each element define the command that will be executed to retrieve the property value.
// The commands are passed to Gitter.run() this implies anything that will run in the terminal 
// including `git` `gh` which Gitter guarantees to support 
// supported tuples are:
//    "cmd": str, the command to run (required)
// The "cmd"  value can contain placeholders for other properties that are defined in the same class.
// e.g. "cmd": "git rev-parse {remote}/{default_branch}", This implies an dependency that doesn't need 
// to be defined explicitly. But the har rule is that placerholders can only be used for properties that 
// from different dependency groups.
//    "msg": str, the note to display in verbose mode (optional, default: "")
// Each element can have a optional group descriptor:
//    "group": "remote" 
// I it does not have one, it will be placed in the basic group "init". An element can only belong to one 
// group. And it may have an implicit dependency - as described above
{
  "devbranch": {
    // init
    // cheep to run - doesn'nt depend on external com
    // has no dependencies
    "branch_name": {
      "cmd": "git rev-parse --abbrev-ref HEAD",
      "msg": "Get the name of the current branch",
      "group": "init"
    },
    "sha1": {
      "cmd": "git rev-parse HEAD",
      "msg": "Get the SHA1 of the current branch",
      "group": "init"
    },
    "status": {
      "cmd": "git status --porcelain",
      "msg": "Get the status of the working directory",
      "group": "init"
    },
    "remote": {
      "cmd": "git remote",
      "msg": "Get the name of the remote",
      "group": "init"
    },
    // init-remote
    // More costly, will depend on coms with GitHub
    // But has no dependencies
    "default_branch": {
      "cmd": "gh repo view --json defaultBranchRef --jq '.defaultBranchRef.name'",
      "msg": "Get the name of the default branch from GitHub",
      "group": "remote-init"
    },
    "repository": {
      "cmd": "gh repo view --json nameWithOwner -q '.nameWithOwner'",
      "msg": "Get the current repository name in the format 'owner/repo'",
      "group": "remote-init"
    },
    // init-last
    // In itself cheap to run - doesn't do external coms
    // But has dependencies on the previous elements
    "merge_base": {
      "cmd": "git merge-base {branch_name} {remote}/{default_branch}",
      "msg": "Get the merge base of the current branch and the default branch",
      "group": "init-last"
    },
    "default_sha1": {
      "cmd": "git rev-parse {remote}/{default_branch}",
      "msg": "Get the SHA1 of the default branch",
      "group": "init-last"
    },
    "remote_sha1": {
      "cmd": "git rev-parse {remote}/{branch_name}",
      "msg": "Get the SHA1 of the remote branch",
      "group": "init-last"
    },
    "me": {
      "cmd": "gh api /user --jq '.login'",
      "msg": "Get the GitHub username of the authenticated user",
      "group": "init-last"
    },
    // pre-squeeze
    // Only relevant to a squeeze
    "issue_title": {
      "cmd": "gh issue view {issue_number} --json title --jq '.title'",
      "msg": "Get the title of the issue from GitHub",
      "group": "pre-squeeze"
    },
    "commit_log": {
      "cmd": "git log --format='%h: '%B {merge_base}..{branch_name}",
      "msg": "Get the commit log of the current branch since the merge base",
      "group": "pre-squeeze"
    },
    "squeeze_sha1": {
      "cmd": "git commit-tree {sha1}^{{tree}} -p {merge_base} -m \"{squeeze_message}\"",
      "msg": "Collapse the branch, since the merge base into a single commit",
      "group": "squeeze"
    },
    // pre-deliver
    "commit_count": {
      "cmd": "git rev-list --count {branch_name} ^{remote}/{default_branch}",
      "msg": "Get the number of commits in the current branch",
      "group": "pre-deliver"
    },
    "local_branches": {
      "cmd": "git branch --format='%(refname:short)'",
      "msg": "Get the list of local branches",
      "group": "branch_reuse"
    },
    "remote_branches": {
      "cmd": "git branch -r --format='%(refname:short)'",
      "msg": "Get the list of remote branches",
      "group": "branch_reuse"
    },
    // Groupless commands - helper functions to run with _run() - do not crearte a property
    "checkout_local_branch": {
      "cmd": "git checkout {branch_name}",
      "msg": "Switch to the local branch"
    },
    "checkout_remote_branch": {
      "cmd": "git checkout -b {branch_name} {remote}/{branch_name}",
      "msg": "Switch to the remote branch and create a local branch"
    },
    "compare_trees": {
      "cmd": "git diff-tree --no-commit-id --name-only -r {sha1} {squeeze_sha1}",
      "msg": "Verify that the new squeezed commit tree is identical to the one on the issue branch"
    },
    "push_squeeze": {
      "cmd": "git push --force {remote} {squeeze_sha1}:refs/heads/{ready_prefix}/{branch_name}",
      "msg": "Push the squeezed sha to the remote as a ready branch"
    },
    "add_all": {
      "cmd": "git add -A",
      "msg": "Staging all changes"
    },
    "commit_changes": {
      "cmd": "git commit -m {commit_msg}",
      "msg": "Commit changes"
    },
    "develop_on_branch": {
      "cmd": "gh issue develop {issue_number} -b {default_branch} -n {branch_name} -c",
      "msg": "Link a branch to an issue (creating the branch if necessary)"
    },
    "add_responsibles_comment": {
      "cmd": "gh issue comment {issue_number} --body '{responsibles_comment_content}'",
      "msg": "Add a comment to the issue notifying responsbiles of changes"
    },
    "git_push": {
      "cmd": "git push {force_switch}",
      "msg": "Push the branch to the remote"
    }
  },
  "issue": {
    "json": {
      "cmd": "gh issue view {number} --json url,title,number,labels,assignees,closed,comments",
      "msg": "Get the properties from the issue",
      "group": "init"
    },
    "reopen": {
      "cmd": "gh issue reopen {number}",
      "msg": "Reopen the issue"
    },
    "create_new_issue": {
      "cmd": "gh issue create --title '{title}' --body '{body}' {assignee_switch}",
      "msg": "Create a new issue in a repository"
    }
  },
  "semver": {
    "tags": {
      "cmd": "git tag --list --format='%(refname:short)'",
      "msg": "List all tags in the repository",
      "group": "init"
    }
  },
  "label": {
    "json_list_all": {
      "cmd": "gh label list --json name,description,color",
      "msg": "List all labels in repo"
    },
    "create_new": {
      "cmd": "gh label create '{name}' -d '{description}' -c '{color}' --force",
      "msg": "Create a new label in a repository"
    }
  },
  "version": {
    "extension_list": {
      "cmd": "gh extension list",
      "msg": "Get a list of installed gh extensions"
    },
    "sha_tags": {
      "cmd": "git tag --points-at {sha}",
      "msg": "Get a list of tags for a given SHA"
    }
  },
  "gitter": {
    "validate_gh_version": {
      "cmd": "gh --version",
      "msg": "Check if the user has access to right version of gh CLI"
    },
    "validate_gh_scope": {
      "cmd": "gh auth status",
      "msg": "Check if the user has sufficient access to update projects"
    },
    "version_context": {
      "cmd": "pwd && python3 --version && git --version && gh --version && gh extension list",
      "msg": "Get information on the context the tool is running in"
    },
    "config": {
      "project_owner": {
        "cmd": "git config --get --default '' -f {gitconfig_file} project.owner",
        "msg": "Get the project owner from .gitconfig"
      },
      "project_number": {
        "cmd": "git config --get --default '' -f {gitconfig_file} project.number",
        "msg": "Get the project number from .gitconfig"
      }
    }
  }
}