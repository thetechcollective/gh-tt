import asyncio
import tempfile
import uuid
from contextlib import contextmanager
from datetime import UTC, datetime
from pathlib import Path

from gh_tt.classes.gitter import Gitter


class Testbed:

    @staticmethod
    def generate_name(infix: str = "") -> str:
        """Returns a timestamped name for naming autogenerated resources"""
        
        today_iso = datetime.now(UTC).date().isoformat()

        return f"gh-tt-test-{infix}-{today_iso}-{uuid.uuid4().hex[:8]}"
    
    @staticmethod
    def clean_up(repository_html_url: str, project_number: int, project_owner: str):
        """Returns state of the testbed to a blank slate
        
        Args:
            repository_html_url (str): url of the repository to clean up, e.g. https://github.com/vemolista/test-repo
            project_number (int): number of the project to clean up
        """

        # TODO: change to run in CI

        asyncio.run(Gitter(
            cmd=f'gh project delete {project_number} --owner {project_owner}',
            msg='Delete GH project'
        ).run())

        asyncio.run(Gitter(
            cmd=f'gh repo delete {repository_html_url} --yes',
            msg='Delete repo'
        ).run())
        
    @staticmethod
    def create_github_repository(owner: str) -> str:
        repo_name = f'{owner}/{Testbed.generate_name(infix='repo')}'
        [repo_html_url, _] = asyncio.run(Gitter(
            cmd=f'gh repo create "{repo_name}" --private',
            msg='Create a testing repository'
        ).run())

        return repo_html_url
    
    @staticmethod
    def create_github_project(owner: str) -> int:
        project_name = Testbed.generate_name(infix='project')
        [project_number, _] = asyncio.run(Gitter(
            cmd=f'gh project create --title "{project_name}" --owner {owner} --format json --jq ".number"',
            msg='Create a testing project'
        ).run())

        return project_number

    @staticmethod
    def gitter_run(cmd: str, cwd: str = Path.cwd()):
        return asyncio.run(Gitter(
            cmd=cmd,
            workdir=cwd
        ).run())
    
    @staticmethod
    def gitter_run_all(cmds: list[str], cwd: str):
        results = []

        for cmd in cmds:
            run_result = Testbed.gitter_run(cmd=cmd, cwd=cwd)
            results.append(run_result)

        return results
    
    @staticmethod
    @contextmanager
    def create_local_repo(default_branch: str = "main"):
        with tempfile.TemporaryDirectory() as td:
            repo = Path(td)
            Testbed.gitter_run_all(cmds=[
                'git init',
                f'git branch -m {default_branch}',
                'git config user.email "me@example.com"',
                'git config user.name "Manual E2E"',
                'git config push.autoSetupRemote true'
            ], cwd=repo)
            
            yield repo

    